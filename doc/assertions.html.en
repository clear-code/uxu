<!DOCTYPE html>
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<title>Avalable assertions in UxU</title>
</head>
<body>
<h1>Avalable assertions in UxU</h1>


<script type="text/javascript" src="./folding_en.js"></script>


<ul>
	<li><a href="#compare">Assertions for values</a></li>
	<li><a href="#type">Assertions for the type of the value</a></li>
	<li><a href="#exception">Assertions for the raising exception</a></li>
	<li><a href="#finishesWithin">Assertions for amount of time required</a></li>
	<li><a href="#assertionsCount">Assertions for the number of performed assertions</a></li>
	<li><a href="#match">Assertions for regular expression</a></li>
	<li><a href="#misc">More...</a></li>
</ul>

<ul>
	<li><a href="index.html.en">UxU Home</a></li>
	<li><a href="testcases.html.en">How to write testcases for UxU?</a></li>
	<li><a href="greasemonkey.html.en">Testing Greasemonkey scripts by UxU</a></li>
	<li><a href="helpers.html.en">Helper methods for testcases</a></li>
	<li><a href="mock.html.en">How to write testcases with mocks?</a></li>
	<li><a href="server.html.en">How to control UxU from remote?</a></li>
	<li><a href="commandline.html.en">Command line options</a></li>
</ul>

<script type="text/javascript">writeCollapseExpandAllButton()</script>

<h2 id="compare">Assertions for values</h2>
<dl class="api-list">
	<dt id="assert.equal">void <code>assert.equal(<var>in Object aExpected</var>, <var>in Object aActual</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assertEqual()</code></span></dt>
	<dt id="assert.strictlyEqual">void <code>assert.strictlyEqual(<var>in Object aExpected</var>, <var>in Object aActual</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assertStrictlyEqual()</code></span></dt>
		<dd>
			<p>Assert equivalency of expected and actual values. <code>AssertionFailed</code> exception raises if they are not equal.</p>
			<p>They work for primitives, objects, DOM nodes, arrays, and objects (hashes). For arrays, they compare all elements. For objects (hashes), they compare all properties.</p>
			<p><code>assert.equal()</code> compares expected and actial values by the <code>==</code> operator.
				<code>assert.strictlyEqual()</code> does it by the <code>===</code> operator.</p>
			<pre><code>assert.equal('expectedValue', object.property);
assert.equal($('node'), object.returnsNode());
assert.equal([$('node1'), $('node2'), $('node2')],
              object.returnsNodesArray());
assert.equal({ name : 'foo', value : 'bar' },
              object.getResult());</code></pre>
			<pre><code>var object = {
    stringProperty: 'expected value',
    nodeProperty: document.getElementById('node'),
    arrayProperty: [0, 1, 2, 3],
    objectProperty: {
      name: 'foo',
      value: 'bar'
    }
};

assert.equal('expected value', object.stringProperty); // success
assert.equal(new String('expected value'), object.stringProperty); // success
assert.strictlyEqual(new String('expected value'), object.stringProperty); // failure

assert.equal($('node'), object.nodeProperty); // success

// compares each element in both arrays.
var primitiveArray = [0, 1, 2, 3];
var objectArray = [new Number(0), new Number(1), new Number(2), new Number(3)];
assert.equal(primitiveArray, object.arrayProperty); // success
assert.equal(objectArray, object.arrayProperty); // success
assert.strictlyEqual(objectArray, object.arrayProperty); // failure

// compares each value of properties of both objects.
var primitiveHash = { name : 'foo', value : 'bar' };
var objectHash = { name : new String('foo'), value : new String('bar') };
assert.equal(primitiveHash, object.objectProperty); // success
assert.equal(objectHash, object.objectProperty); // success
assert.strictlyEqual(objectHash, object.objectProperty); // failure</code></pre>
		</dd>
	<dt id="assert.same">void <code>assert.same(<var>in Object aExpected</var>, <var>in Object aActual</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assertSame()</code></span></dt>
		<dd>
			<p>Assert identicalicy of expected and actual values. <code>AssertionFailed</code> exception raises if they are not same.</p>
			<pre><code>var obj1 = { value: '1' };
var obj2 = { value: '1' };

assert.equal(obj1, obj2); // success
assert.strictlyEqual(obj1, obj2); // success

assert.same(obj1, obj2); // failure
assert.same(obj1, obj1); // success</code></pre>
		</dd>
	<dt id="assert.notEqual">void <code>assert.notEqual(<var>in Object aExpected</var>, <var>in Object aActual</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assertNotEqual()</code></span></dt>
	<dt id="assert.notStrictlyEqual">void <code>assert.notStrictlyEqual(<var>in Object aExpected</var>, <var>in Object aActual</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assertNotStrictlyEqual()</code></span></dt>
		<dd>
			<p>Opposite of <code>assert.equal()</code> and <code>assert.strictlyEqual()</code>. Assert un-equivalency of expected and actual values. <code>AssertionFailed</code> exception raises if they are equal.</p>
			<p>They work for primitives, objects, DOM nodes, arrays, and objects (hashes). For arrays, they compare all elements. For objects (hashes), they compare all properties.</p>
			<p><code>assert.notEqual()</code> compares expected and actial values by the <code>==</code> operator.
				<code>assert.notStrictlyEqual()</code> does it by the <code>===</code> operator.</p>
			<pre><code>var object = {
    stringProperty: 'expected value',
    nodeProperty: document.getElementById('node'),
    arrayProperty: [0, 1, 2, 3],
    objectProperty: {
      name: 'foo',
      value: 'bar'
    }
};

assert.notEqual('unexpected value', object.stringProperty); // success
assert.notEqual(new String('unexpected value'), object.stringProperty); // success
assert.notEqual('expected value', object.stringProperty); // failure
assert.notStrictlyEqual(new String('expected value'), object.stringProperty); // success
assert.notStrictlyEqual('expected value', object.stringProperty); // failure

assert.notEqual($('another'), object.nodeProperty); // success

// compares each element in both arrays.
var primitiveDifferentArray = [4, 5, 6, 7];
var primitiveEqualArray = [0, 1, 2, 3];
var objectEqualArray = [new Number(0), new Number(1), new Number(2), new Number(3)];
assert.notEqual(primitiveDifferentArray, object.arrayProperty); // success
assert.notEqual(primitiveEqualArray, object.arrayProperty); // failure
assert.notEqual(objectEqualArray, object.arrayProperty); // failure
assert.notStrictlyEqual(primitiveEqualArray, object.arrayProperty); // failure
assert.notStrictlyEqual(objectEqualArray, object.arrayProperty); // success

// compares each value of properties of both objects.
var primitiveDifferentHash = { name : 'buzz', value : 'fizz' };
var primitiveEqualHash = { name : 'foo', value : 'bar' };
var objectEqualHash = { name : new String('foo'), value : new String('bar') };
assert.notEqual(primitiveDifferentHash, object.objectProperty); // success
assert.notEqual(primitiveEqualHash, object.objectProperty); // failure
assert.notEqual(objectEqualHash, object.objectProperty); // failure
assert.notStrictlyEqual(primitiveEqualHash, object.objectProperty); // failure
assert.notStrictlyEqual(objectEqualHash, object.objectProperty); // success</code></pre>
		</dd>
	<dt id="assert.notSame">void <code>assert.notSame(<var>in Object aExpected</var>, <var>in Object aActual</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assertNotSame()</code></span></dt>
		<dd>
			<p>Opposite of <code>assert.same()</code>. Assert un-identicalicy of expected and actual values. <code>AssertionFailed</code> exception raises if they are same.</p>
			<pre><code>var obj1 = { value: '1' };
var obj2 = { value: '1' };
assert.notSame(obj1, obj2); // success
assert.notSame(obj1, obj1); // failure</code></pre>
		</dd>
	<dt id="assert.contains">void <code>assert.contains(<var>in Object aElementShouldBeContained</var>, <var>in Object aElementsOrRange</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assertContain()</code></span></dt>
		<dd>
			<p>Asserts that the second argument contains the first argument. <code>AssertionFailed</code> exception raises if the second doesn't contain the first.</p>
			<p>You can specify a nsISelection, a DOM Range, a DOM Node, or an array as the second argument. Otherwise this method converts the object to a string. See specific examples:</p>
			<table border="1" summary="You can specify a nsISelection, a DOM Range, a DOM Node, or an array as the second argument.">
				<thead><tr><th>second argument</th><th>first argument</th><th>assertion</th></tr></thead>
				<tbody>
					<tr>
						<td rowspan="2">nsISelection</td>
						<td>DOM Range</td>
						<td>The range of the nsISelection completely wraps the first argument range. (Note: This doesn't assert that one of ranges of the nsISelection <em>equals</em> the first argument. This only asserts that one of them <em>wraps</em> the first argument.)</td>
					</tr>
					<tr>
						<td>DOM Node</td>
						<td>The range of nsISelection completely wraps the node.</td>
					</tr>
					<tr>
						<td rowspan="2">DOM Range</td>
						<td>DOM Range</td>
						<td>The second argument range completely wraps the first argument range.</td>
					</tr>
					<tr>
						<td>DOM Node</td>
						<td>The range completely wraps the node.</td>
					</tr>
					<tr>
						<td rowspan="2">DOM Node</td>
						<td>DOM Range</td>
						<td>The whole range of the node's sub tree wraps the first argument range.</td>
					</tr>
					<tr>
						<td>DOM Node</td>
						<td>The first argument node is a descendant of the second argument node.</td>
					</tr>
					<tr>
						<td>Array</td>
						<td>Any object</td>
						<td>The object is an element of the array.</td>
					</tr>
					<tr>
						<td colspan="2">Otherwise</td>
						<td>The stringized version of the second argument object contains the stringized version of the first argument object. (Note: This is case sensitive.)</td>
					</tr>
				</tbody>
			</table>
			<pre><code>assert.contains('- Firefox', window.document.title);

var terms = ['extracted', 'extended', 'expected'];
assert.contains('expected', terms); // success

assert.contains(doc.body.firstChild,
                doc.body); // success

var range = doc.createRange();
range.selectNode(doc.body);
assert.contains(doc.body, range); // success
assert.contains(doc.body.firstChild, range); // success
assert.contains(doc.documentElement, range); // failure</code></pre>
		</dd>
	<dt id="assert.notContains">void <code>assert.notContains(<var>in Object aElementShouldNotBeContained</var>, <var>in Object aElementsOrRange</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assertNotContain()</code></span></dt>
		<dd>
			<p>Opposite of <code>assert.contains()</code>.</p>
			<pre><code>assert.notContains('error', object.getResultsArray());
assert.notContains('out of selection', content.getSelection());</code></pre>
		</dd>
	<dt id="assert.contained">void <code>assert.contained(<var>in Object aElementsOrRangeShouldContain</var>, <var>in Object aElement</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assertContained()</code></span></dt>
		<dd>
			<p>Asserts that the second argument is contained in the first argument. <code>AssertionFailed</code> exception raises if the first doesn't contain the second.</p>
			<p>You can specify a nsISelection, a DOM Range, a DOM Node, or an array as the first argument. Otherwise this method converts the object to a string. See <a href="#assert.contains"><code>assert.contains()</code></a> also.</p>
			<pre><code>assert.contained('Start - Firefox', myAddon.brandName);

var terms = ['extracted', 'extended', 'expected'];
assert.contained(terms, myAddon.lastTerm);

assert.contained(doc.body,
                 doc.body.firstChild); // success

var range = doc.createRange();
range.selectNode(doc.body);
assert.contained(range, doc.body.firstChild); // success
assert.contained(range, doc.documentElement); // failure</code></pre>
		</dd>
	<dt id="assert.notContained">void <code>assert.notContained(<var>in Object aElementsOrRangeShouldNotContain</var>, <var>in Object aElement</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assertNotContaied()</code></span></dt>
		<dd>
			<p>Opposite of <code>assert.contained()</code>.</p>
			<pre><code>assert.notContained('error,failure', myAddon.lastStatus);
assert.notContained(content.getSelection(), myAddon.getNextNodeOfSelection());</code></pre>
		</dd>
	<dt id="assert.isTrue">void <code>assert.isTrue(<var>in aExpression</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assert.true()</code>, <code>assert()</code>, <code>assertTrue()</code></span></dt>
		<dd>
			<p>If the expression equals to <code>false</code> (ex. 0, "", false, null, or undefined) unexpectedly, then <code>AssertionFailed</code> exception raise.</p>
			<pre><code>checkbox.setAttribute('checked', true);
assert.isTrue(checkbox.checked);</code></pre>
		</dd>
	<dt id="assert.isFalse">void <code>assert.isFalse(<var>in aExpression</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assert.false()</code>, <code>assertFalse()</code></span></dt>
		<dd>
			<p>If the expression equals to <code>true</code> unexpectedly, then <code>AssertionFailed</code> exception raises.</p>
			<pre><code>checkbox.removeAttribute('checked');
assert.isTrue(checkbox.checked);</code></pre>
		</dd>
	<dt id="assert.inDelta">void <code>assert.inDelta(<var>in Number aExpected</var>, <var>in Number aActual</var>, <var>in Number aDelta</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assertInDelta()</code></span></dt>
		<dd>
			<p><code>AssertionFailed</code> exception raises if the actual value is out of the specified range. In other words, this fails when "<code><var>aActual</var> &lt; <var>aExpected</var> - <var>aDelta</var> || <var>aActual</var> &gt; <var>aExpected</var> + <var>aDelta</var></code>" is true.</p>
			<pre><code>var array = '0,1,2,3,4,5,6,7,8,9'.split(',');
// extract about half elements at random
var extracted = array.filter(function(aItem) {
		return Math.random() &gt; 0.5;
	});
// assert the number of extracted items,
// margin of error is plus or minus 2
assert.inDelta(5, extracted.length, 2);</code></pre>
		</dd>
	<dt id="assert.difference">void <code>assert.difference(<var>in Fuction aGetter</var>, <var>in Number aExpectedDifference</var>, <var>in Function aTestTask</var>, <var>[in Object aScope]</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assertDifference()</code></span></dt>
		<dd>
			<p>TBD</p>
			<pre><code>TBD</code></pre>
		</dd>
	<dt id="assert.noDifference">void <code>assert.noDifference(<var>in Fuction aGetter</var>, <var>in Function aTestTask</var>, <var>[in Object aScope]</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assertNoDifference()</code></span></dt>
		<dd>
			<p>TBD</p>
			<pre><code>TBD</code></pre>
		</dd>
	<dt id="assert.compare">void <code>assert.compare(<var>in Number aExpected</var>, <var>in String aOperator</var>, <var>in Number aActual</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assertCompare()</code></span></dt>
		<dd>
			<p><code>AssertionFailed</code> exception raises if the result of comparison aExpected and aActual by aOperator is false. Available operators are <code>==</code>, <code>===</code>, <code>!=</code>, <code>!==</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, and <code>&gt;=</code>. Otherwise raises an error</p>
			<pre><code>assert.compare(100, '&lt;=', func1());
assert.compare(100, '&gt;', func2());</code></pre>
		</dd>
</dl>
<h4>Note: special cases of "equals" assertions</h4>
<p><code>assert.equal()</code>, <code>assert.notEqual()</code>, <code>assert.strictlyEqual()</code>, <code>assert.notStrictlyEqual()</code>, and <code>assert.compare()</code> work specially for the following types:</p>
<dl>
	<dt><code>Date</code></dt>
		<dd>
			<p>Date-times are compared.</p>
		</dd>
	<dt><code>Array</code></dt>
		<dd>
			<p>Lengthes and all elements are compared.</p>
		</dd>
	<dt><code>Object</code> (object literals, hashes, instances of custom classes)</dt>
		<dd>
			<p>Names and values of all properties are compared.</p>
		</dd>
</dl>

<h2 id="type">Assertions for the type of the value</h2>
<dl class="api-list">
	<dt id="assert.isBoolean">void <code>assert.isBoolean(<var>in aExpression</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assert.boolean()</code>, <code>assertBoolean()</code></span></dt>
		<dd>
			<p><code>AssertionFailed</code> exception raises if it is not a boolean value unexpectedly.</p>
			<pre><code>assert.isBoolean(checkbox.checked);
assert.isBoolean(checkbox.disabled);
assert.isBoolean(utility.getPref('some.boolean.pref'));</code></pre>
		</dd>
	<dt id="assert.isNotBoolean">void <code>assert.isNotBoolean(<var>in aExpression</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assert.notBoolean()</code>, <code>assertNotBoolean()</code></span></dt>
		<dd>
			<p><code>AssertionFailed</code> exception raises if it is a boolean value unexpectedly.</p>
			<pre><code>assert.isNotBoolean(notInitializedObject.booleanProperty);</code></pre>
		</dd>
	<dt id="assert.isString">void <code>assert.isString(<var>in aExpression</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assert.string()</code>, <code>assertString()</code></span></dt>
		<dd>
			<p><code>AssertionFailed</code> exception raises if it is not a string value unexpectedly.</p>
			<pre><code>assert.isString(input.value);
assert.isString(element.getAttribute('undefined-attribute'));
assert.isString(utility.getPref('some.string.pref'));</code></pre>
		</dd>
	<dt id="assert.isNotString">void <code>assert.isNotString(<var>in aExpression</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assert.notString()</code>, <code>assertNotString()</code></span></dt>
		<dd>
			<p><code>AssertionFailed</code> exception raises if it is a string value unexpectedly.</p>
			<pre><code>assert.isNotString(notInitializedObject.stringProperty);</code></pre>
		</dd>
	<dt id="assert.isNumber">void <code>assert.isNumber(<var>in aExpression</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assert.number()</code>, <code>assertNumber()</code></span></dt>
		<dd>
			<p><code>AssertionFailed</code> exception raises if it is not a numeric value unexpectedly.</p>
			<pre><code>assert.isNumber(httpClient.errorCode);
assert.isNumber(utility.getPref('some.integer.pref'));</code></pre>
		</dd>
	<dt id="assert.isNotNumber">void <code>assert.isNotNumber(<var>in aExpression</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assert.notNumber()</code>, <code>assertNotNumber()</code></span></dt>
		<dd>
			<p><code>AssertionFailed</code> exception raises if it is a numeric value unexpectedly.</p>
			<pre><code>assert.isNotString(notInitializedObject.intProperty);</code></pre>
		</dd>
	<dt id="assert.isFunction">void <code>assert.isFunction(<var>in aExpression</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assert.function()</code>, <code>assertFunction()</code></span></dt>
		<dd>
			<p><code>AssertionFailed</code> exception raises if it is not a function unexpectedly.</p>
			<pre><code>assert.isFunction(element.hasAttribute);
assert.isFunction(instance.inheritedMethod);</code></pre>
		</dd>
	<dt id="assert.isNotFunction">void <code>assert.isNotFunction(<var>in aExpression</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assert.notFunction()</code>, <code>assertNotFunction()</code></span></dt>
		<dd>
			<p><code>AssertionFailed</code> exception raises if it is a function unexpectedly.</p>
			<pre><code>assert.isNotFunction(instanceOfSuperClass.methodOfSubClass);</code></pre>
		</dd>
	<dt id="assert.isDefined">void <code>assert.isDefined(<var>in aExpression</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assert.defined()</code>, <code>assertDefined()</code></span></dt>
		<dd>
			<p><code>AssertionFailed</code> exception raises if it is undefined unexpectedly.</p>
			<pre><code>assert.isDefined(instance.inheritedProperty);
assert.isDefined(Ci.myICustomInterface);</code></pre>
		</dd>
	<dt id="assert.isUndefined">void <code>assert.isUndefined(<var>in aExpression</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assert.undefined()</code>, <code>assertUndefined()</code></span></dt>
		<dd>
			<p><code>AssertionFailed</code> exception raises if it is defined unexpectedly.</p>
			<pre><code>assert.isUndefined(checkbox.valid);
assert.isUndefined(Ci.myIOldCustomInterface);</code></pre>
		</dd>
	<dt id="assert.isNull">void <code>assert.isNull(<var>in aExpression</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assert.null()</code>, <code>assertNull()</code></span></dt>
		<dd>
			<p><code>AssertionFailed</code> exception raises if it is not null unexpectedly.</p>
			<pre><code>assert.isNull(element.nodeValue);
assert.isNull(utility.getPref('some.undefined.pref'));</code></pre>
		</dd>
	<dt id="assert.isNotNull">void <code>assert.isNotNull(<var>in aExpression</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assert.notNull()</code>, <code>assertNotNull()</code></span></dt>
		<dd>
			<p><code>AssertionFailed</code> exception raises if it is null unexpectedly.</p>
			<pre><code>assert.isNotNull(element.getAttribute('undefined-attribute'));
assert.isNotNull(utility.getPref('some.defined.pref'));</code></pre>
		</dd>
	<dt id="assert.isInstanceOf">void <code>assert.isInstanceOf(<var>in Object aExpectedClass</var>, <var>in aObject aInstance</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assert.instanceOf()</code>, <code>assert.instanceof()</code>, <code>assert.instance()</code>, <code>assertInstanceOf()</code>, <code>assertInstanceof()</code>, <code>assertInstance()</code></span></dt>
		<dd>
			<p>TBD</p>
			<pre><code>TBD</code></pre>
		</dd>
	<dt id="assert.inplementsInterface">void <code>assert.inplementsInterface(<var>in aInterface</var>, <var>in aObject</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assert.inplementInterface()</code>, <code>assertInplementsInterface()</code>, <code>assertInplementInterface()</code></span></dt>
		<dd>
			<p>Asserts an object inplements an XPCOM interface. You can specify any interface by the reference (like <code>Components.interfaces.nsI<var>*</var></code>) or the name of the interface (like <code>"nsI<var>*</var></code>).</p>
			<p><code>AssertionFailed</code> exception raises if the object doesn't implement the specified interface.</p>
			<pre><code>assert.implementsInterface(Ci.nsIDOMWindow, getWindow());
assert.implementsInterface('nsIDOMWindow', getWindow());
assert.implementsInterface(Ci.nsIDOMRange, getWindow()); // this will fail</code></pre>
		</dd>
</dl>

<h2 id="exception">Assertions for the raising exception</h2>
<dl class="api-list">
	<dt id="assert.raises">Object <code>assert.raises(<var>in Exception aExpected</var>, <var>in Function aTestTask</var>, <var>[in Object aScope]</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assert.throws()</code>, <code>assertRaise()</code>, <code>assertThrow()</code></span></dt>
		<dd>
			<p>This runs the function in the scope specified as the third argument or the current scope. If no exception or unexpected one raises from the operation, then <code>AssertionFailed</code> exception raises.</p>
			<pre><code>loader.INVALID_URI_ERROR = 'invalid uri';
loader.open = function(aURI) {
  if (aURI) this.uri = aURI;
  if (!/^https?:/.test(this.uri))
    throw new Error(this.INVALID_URI_ERROR);
  window.open(this.uri);
};
loader.uri = 'mailto:test@example.com';

assert.raises(
  loader.INVALID_URI_ERROR,
  loader.open,
  loader
);
assert.raises(
  loader.INVALID_URI_ERROR,
  function() {
    loader.open('ftp://ftp.example.com');
  },
  {}
);</code></pre>
			<p>This assertion successes when one of followings equals to the expected: raised exception itself, the constructor function, its <code>name</code> property, its <code>message</code> property, its <code>result</code> property, or its properties specified by a hash. Valid samples:</p>
			<pre><code>assert.raises('error',
              function() { throw 'error'; });
assert.raises('error',
              function() { throw new Error('error'); });
assert.raises('SyntaxError',
              function() { eval('{'); });
assert.raises(SyntaxError,
              function() { eval('{'); });
assert.raises(Components.results.NS_NOINTERFACE,
              function() { window.QueryInterface(Ci.nsIDOMDocument); });
assert.raises('NS_NOINTERFACE',
              function() { window.QueryInterface(Ci.nsIDOMDocument); });
assert.raises({ expected : true, actual : false },
              function() { var e = new Error();
                           e.expected = true;
                           e.actual = false;
                           throw e; });</code></pre>
			<p>Moreover, this assertion returns an object for <a href="#waiting-object">waiting</a>. You can test features which require to be asserted after delay.</p>
			<pre><code>yield Do(assert.raises(
    loader.INVALID_URI_ERROR,
    function() {
      loader.open('http://www.example.com');
      yield 500;
      loader.open('ftp://ftp.example.com');
    },
    {}
  ));</code></pre>
		</dd>
	<dt id="assert.notRaises">Object <code>assert.notRaises(<var>in Exception aExpected</var>, <var>in Function aTestTask</var>, <var>in Object aScope</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assert.notThrows()</code>, <code>assertNotRaise()</code>, <code>assertNotThrow()</code></span></dt>
		<dd>
			<p>Opposite of <code>assert.raises()</code>. If the specified exception raises from the operation, then <code>AssertionFailed</code> exception raises. This assertion compares the actual exception with the expected, by the method same algorithm of <a href="#assert.raises">assert.raise()</a>.</p>
			<pre><code>loader.INVALID_URI_ERROR = 'invalid uri';
loader.open = function(aURI) {
  if (aURI) this.uri = aURI;
  if (!/^https?:/.test(this.uri))
    throw new Error(this.INVALID_URI_ERROR);
  window.open(this.uri);
};
loader.uri = 'http://www.example.com';

assert.notRaises(
  loader.INVALID_URI_ERROR,
  loader.open,
  loader
);
assert.notRaises(
  loader.INVALID_URI_ERROR,
  function() {
    loader.open('https://secure.example.com');
  },
  {}
);</code></pre>
			<p>Moreover, this assertion returns an object for <a href="#waiting-object">waiting</a>. You can test features which require to be asserted after delay.</p>
			<pre><code>yield Do(assert.notRaises(
    loader.INVALID_URI_ERROR,
    function() {
      loader.open('http://www1.example.com');
      yield 500;
      loader.open('http://www2.example.com');
    },
    {}
  ));</code></pre>
		</dd>
</dl>

<h2 id="finishesWithin">Assertions for amount of time required</h2>
<dl class="api-list">
	<dt id="assert.finishesWithin">Object <code>assert.finishesWithin(<var>in Number aExpectedTime</var>, <var>in Function aTestTask</var>, <var>in Object aScope</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assert.finishWithin()</code>, <code>assertFinishWithin()</code></span></dt>
		<dd>
			<p>This runs the function in the scope specified as the third argument or the current scope. If it uses more than the expected time (in milliseconds), then <code>AssertionFailed</code> exception raises.</p>
			<pre><code>function functionContainsLongLoop() {
  for (var i = 0, maxi = 5000; i &lt; maxi; i++) {
    process(data[i]);
  }
}
assert.finishesWithin(
  5 * 1000, // 5sec.
  functionContainsLongLoop,
  {}
);</code></pre>
			<p>Moreover, this assertion returns an object for <a href="#waiting-object">waiting</a>. You can test features which require to be asserted after delay.</p>
			<pre><code>var manager = {
    tasks : [],
    func  : loadAndParse,
    timer : null,
    start : function() {
      this.timer = window.setInterval(function(aSelf) {
          if (!aSelf.tasks.length) {
            window.clearInterval(aSelf.timer);
            return;
          }
          aSelf.func(aSelf.tasks.shift());
        }, 10, this);
    }
  };
manager.tasks.push('http://www.example.com/');
manager.tasks.push('http://www.example.jp/');
manager.tasks.push('http://www.example.net/');

utils.wait(assert.finishesWithin(
    10 * 1000, // 10sec.
    function() {
      manager.start();
      while (manager.tasks.length) {
        utils.wait(100);
      }
    },
    {}
  ));</code></pre>
		</dd>
	<dt id="assert.finishesOver">Object <code>assert.finishesOver(<var>in Number aExpectedTime</var>, <var>in Function aTestTask</var>, <var>in Object aScope</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assert.finishOver()</code>, <code>assertFinishOver()</code>, <code>assert.notFinishesWithin()</code>, <code>assert.notFinishWithin()</code>, <code>assertNotFinishWithin()</code></span></dt>
		<dd>
			<p>This runs the function in the scope specified as the third argument or the current scope. If it uses less than the expected time (in milliseconds), then <code>AssertionFailed</code> exception raises.</p>
			<pre><code>function doWait(aTimeout) {
  ...
}
assert.finishesOver(
  5 * 1000, // 5sec.
  function() {
    doWait(5);
  }
);</code></pre>
			<p>Moreover, this assertion returns an object for <a href="#waiting-object">waiting</a>. You can test features which require to be asserted after delay.</p>
		</dd>
</dl>

<h2 id="assertionsCount">Assertions for the number of performed assertions</h2>
<dl class="api-list">
	<dt id="assert.assertionsCountEquals">Object <code>assert.assertionsCountEquals(<var>in Number aExpectedCount</var>, <var>in Function aTestTask</var>, <var>in Object aScope</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assert.assertionsCountEqual()</code>, <code>assertAssertionsCountEqual()</code></span></dt>
		<dd>
			<p>This is the local version of <a href="#success-count">assertion by <code>assertions</code> property</a>.</p>
			<p>This runs the function in the scope specified as the third argument or the current scope. If more or less assertions are performed than the expected, then <code>AssertionFailed</code> exception raises.</p>
			<pre><code>assert.assertionsCountEquals(
  2,
  function() {
    assert.isNotNull(value);
    assert.isFunction(value);
  },
  {}
);</code></pre>
			<p>Moreover, this assertion returns an object for <a href="#waiting-object">waiting</a>. You can test features which require to be asserted after delay.</p>
			<pre><code>utils.wait(assert.assertionsCountEquals(
    10,
    function() {
      assert.isNotNull(value);
      utils.wait(500);
      assert.isFunction(value);
    },
    {}
  ));</code></pre>
		</dd>
	<dt id="assert.assertionsMinCount">Object <code>assert.assertionsMinCount(<var>in Number aExpectedMinCount</var>, <var>in Function aTestTask</var>, <var>in Object aScope</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assert.assertionsMinCount()</code>, <code>assertAssertionsMinCount()</code></span></dt>
		<dd>
			<p>This is the local version of <a href="#success-count">assertion by <code>minAssertions</code> property</a>.</p>
			<p>This runs the function in the scope specified as the third argument or the current scope. If less assertions are performed than the expected, then <code>AssertionFailed</code> exception raises.</p>
			<pre><code>assert.assertionsMinCount(
  2,
  function() {
    myCustomAssertion(value); // includes 2 or more assertions
  },
  {}
);</code></pre>
			<p>Moreover, this assertion returns an object for <a href="#waiting-object">waiting</a>. You can test features which require to be asserted after delay.</p>
			<pre><code>utils.wait(assert.assertionsCountEquals(
    10,
    function() {
      utils.wait(myCustomAssertion(value));
    },
    {}
  ));</code></pre>
		</dd>
	<dt id="assert.assertionsMaxCount">Object <code>assert.assertionsMaxCount(<var>in Number aExpectedMaxCount</var>, <var>in Function aTestTask</var>, <var>in Object aScope</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assert.assertionsMaxCount()</code>, <code>assertAssertionsMaxCount()</code></span></dt>
		<dd>
			<p>This is the local version of <a href="#success-count">assertion by <code>maxAssertions</code> property</a>.</p>
			<p>This runs the function in the scope specified as the third argument or the current scope. If more assertions are performed than the expected, then <code>AssertionFailed</code> exception raises.</p>
			<pre><code>assert.assertionsMinCount(
  2,
  function() {
    myCustomAssertion(value); // includes 2 or less assertions
  },
  {}
);</code></pre>
			<p>Moreover, this assertion returns an object for <a href="#waiting-object">waiting</a>. You can test features which require to be asserted after delay.</p>
			<pre><code>utils.wait(assert.assertionsCountEquals(
    10,
    function() {
      utils.wait(myCustomAssertion(value));
    },
    {}
  ));</code></pre>
		</dd>
</dl>

<h2 id="match">Assertions for regular expression</h2>
<dl class="api-list">
	<dt id="assert.matches">void <code>assert.matches(<var>in RegExp aExpected</var>, <var>in String aActual</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assertMatch()</code></span></dt>
		<dd>
			<p><code>AssertionFailed</code> exception raises if the string doesn't match to the regular expression.</p>
			<pre><code>assert.matches(/^(success|skip)$/i, module.result);
assert.matches(/https?:\/\//, module.message);</code></pre>
		</dd>
	<dt id="assert.notMatches">void <code>assert.notMatches(<var>in RegExp aUnexpected</var>, <var>in String aActual</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assertNotMatch()</code></span></dt>
		<dd>
			<p>Opposite of <code>assert.matches()</code>.</p>
			<pre><code>assert.notMatches(/^(failure|error)$/i, module.result);
assert.notMatches(/(ftp|nntp):/, module.message);</code></pre>
		</dd>
	<dt id="assert.pattern">void <code>assert.pattern(<var>in String aExpected</var>, <var>in RegExp aActual</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assertPattern()</code></span></dt>
		<dd>
			<p>This is for regular expression generators. If the regular expression doesn't match to the string, <code>AssertionFailed</code> exception raises.</p>
			<pre><code>var regexp = module.mailAddressRegExp;
assert.pattern('test@example.com', regexp);
assert.pattern('My Name &lt;test@example.com&gt;', regexp);</code></pre>
		</dd>
	<dt id="assert.notPattern">void <code>assert.notPattern(<var>in String aUnexpected</var>, <var>in RegExp aActual</var>, <var>[in String aMessage]</var>)</code>
		<span class="alias">alias: <code>assertNotPattern()</code></span></dt>
		<dd>
			<p>Opposite of <code>assert.pattern()</code>.</p>
			<pre><code>var regexp = module.mailAddressRegExp;
assert.notPattern('foobar@', regexp);
assert.notPattern('My Name (test at example.com)', regexp);</code></pre>
		</dd>
</dl>

<h2 id="misc">More...</h2>
<p>You can specify a custom message for any assertion. The message will be shown in the report if the assertion is failed, so you can output details of the situation which the test fails on.</p>

<p>Custom assertions can be defined like as:</p>
<pre><code>assert.isOK = function(aActualValue) {
  var expected = 'OK';
  assert.equal(expected, aActualValue);
}</code></pre>
</body></html>
