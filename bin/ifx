#!/usr/bin/env ruby
#
# Copyright (C) 2010 by ClearCode Inc.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA	02110-1301 USA
# 
# Author: ClearCode Inc. http://www.clear-code.com/

require 'readline'
require 'socket'

port = ARGV.shift || 4444

QUIT_MESSAGE = [0x1A].pack("U") + "__QUIT__"

history_file = nil
begin
  history_file = File.expand_path("~/.ifx.history")
rescue ArgumentError
  history_file = "ifx-history.txt"
end
max_history_size = 1000

if defined?(Readline::HISTORY)
  history_file = File.expand_path(history_file)
  if File.exist?(history_file)
    lines = IO.readlines(history_file).collect {|line| line.chomp}
    Readline::HISTORY.push(*lines)
  end

  at_exit do
    lines = Readline::HISTORY.to_a.reverse.uniq.reverse
    lines = lines[-[max_history_size, lines.size].min, max_history_size]
    File::open(history_file, File::WRONLY|File::CREAT|File::TRUNC) do |output|
      output.puts(lines)
    end
  end
end


begin
  TCPSocket.open("localhost", port) do |socket|
    while line = Readline.readline("firefox> ", true)
      begin
        socket.puts(line)
      rescue Errno::EPIPE
        break
      end
      buffer = ""
      while IO.select([socket], [], [], 0.05)
        break if socket.eof?
        buffer << socket.readpartial(4096)
      end
      unless buffer.empty?
        raise Exception.new if buffer[0, 5] == QUIT_MESSAGE
        puts buffer
      end
    end
  end
rescue SystemCallError
  puts "Is UxU server running? (localhost:#{port})"
  exit(1)
rescue Exception
  exit(1)
end
