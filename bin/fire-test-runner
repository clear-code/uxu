#!/usr/bin/env ruby

require 'socket'
require 'optparse'
require 'ostruct'
require 'pathname'

options = OpenStruct.new
options.host = "localhost"
options.port = 4444
options.firefox = "firefox &"
options.wait = 1.5

opts = OptionParser.new("Usage: #{$0} [options] test_or_directory...") do |opts|
  opts.on("--host=HOST",
          "host name to connect Firefox (#{options.host})") {|options.host|}
  opts.on("-pPORT", "--port=PORT", Integer,
          "port number to connect Firefox (#{options.port})") {|options.port|}
  opts.on("--firefox=FIREFOX",
          "command to start Firefox (#{options.firefox})") {|options.firefox|}
  opts.on("--wait=SECONDS", Float,
          "how log wait to start Firefox (#{options.wait})") {|options.wait|}

  opts.separator ""
  opts.on_tail("--help", "Show this message") do
    puts opts
    exit
  end
end
tests = opts.parse!(ARGV)
if tests.empty?
  $stderr.puts opts
  exit 1
end

class Runner
  def initialize(socket, target_path, output=$stdout)
    @socket = socket
    @output = output
    @output.sync = true
    @target_path = target_path
    @reporter_var_name = "reporter"
    @shown_result_index = 0
  end

  def run
    target_paths = collect_target_paths
    escaped_target_paths = target_paths.collect do |path|
      normalized_path = normalize_separator(@target_path)
      escaped_path = escape_path(normalized_path.to_s)
      "'#{escaped_path}'"
    end.join(", ")
    @socket.puts("var #{@reporter_var_name};")
    @socket.puts("#{@reporter_var_name} = runTest(#{escaped_target_paths});")

    show_result while running?
    show_result
    @output.puts
  end

  private
  def collect_target_paths
    if @target_path.directory?
      Pathname.glob(@target_path + "**" + "*.test.js")
    else
      [@target_path]
    end
  end

  def normalize_separator(path)
    if File::ALT_SEPARATOR
      normalized_file_name = Pathname(path.to_s.gsub(/\//, File::ALT_SEPARATOR))
    else
      normalized_file_name = path
    end
  end

  def escape_path(path)
    path.gsub(/\\/, "\\\\\\").gsub(/'/, "\\'")
  end

  def read
    buf = ""
    while IO.select([@socket], [], [], 0.1)
      @socket.readpartial(4096, buf)
    end
    buf
  end

  def running?
    @socket.puts("#{@reporter_var_name}.isFinished()")
    result = nil
    loop do
      result = read.chomp
      break unless result.empty?
    end

    unless ["true", "false"].include?(result)
      @output.puts("Failed:")
      @output.puts(result)
      return false
    end
    result != "true"
  end

  def show_result
    @socket.puts("#{@reporter_var_name}.result")
    sleep 0.5
    result = (read[@shown_result_index..-1] || "").chomp
    unless result.empty?
      @output.print(result)
      @shown_result_index += result.size
    end
  end
end

def run(tests, options)
  TCPSocket.open(options.host, options.port) do |socket|
    tests.each do |test|
      runner = Runner.new(socket, Pathname(test).expand_path)
      runner.run
    end
  end
end

begin
  run(tests, options)
rescue SystemCallError
  system(options.firefox)
  sleep options.wait
  run(tests, options)
end
