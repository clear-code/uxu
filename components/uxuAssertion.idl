#include "nsISupports.idl"
#include "domstubs.idl"
#include "nsIVariant.idl"

interface nsIVariant;

[scriptable, uuid(7c7261d0-be22-11de-8a39-0800200c9a66)]
interface uxuIAssertion : nsISupports
{
	void resetSuccessCount();

	void equals(in nsIVariant expected, in nsIVariant actual, [optional] in AString message);
	void equal(in nsIVariant expected, in nsIVariant actual, [optional] in AString message);
	void arrayEquals(in nsIVariant expected, in nsIVariant actual, [optional] in AString message);
	void arrayEqual(in nsIVariant expected, in nsIVariant actual, [optional] in AString message);
	void notEquals(in nsIVariant expected, in nsIVariant actual, [optional] in AString message);
	void notEqual(in nsIVariant expected, in nsIVariant actual, [optional] in AString message);

	void strictlyEquals(in nsIVariant expected, in nsIVariant actual, [optional] in AString message);
	void strictlyEqual(in nsIVariant expected, in nsIVariant actual, [optional] in AString message);
	void notStrictlyEquals(in nsIVariant expected, in nsIVariant actual, [optional] in AString message);
	void notStrictlyEqual(in nsIVariant expected, in nsIVariant actual, [optional] in AString message);

	void isTrue(in nsIVariant actual, [optional] in AString message);
	void isFalse(in nsIVariant actual, [optional] in AString message);

	void isBoolean(in nsIVariant actual, [optional] in AString message);
	void isNotBoolean(in nsIVariant actual, [optional] in AString message);
	void isString(in nsIVariant actual, [optional] in AString message);
	void isNotString(in nsIVariant actual, [optional] in AString message);
	void isNumber(in nsIVariant actual, [optional] in AString message);
	void isNotNumber(in nsIVariant actual, [optional] in AString message);
	void isFunction(in nsIVariant actual, [optional] in AString message);
	void isNotFunction(in nsIVariant actual, [optional] in AString message);

	void isDefined(in nsIVariant actual, [optional] in AString message);
	void isUndefined(in nsIVariant actual, [optional] in AString message);
	void isNull(in nsIVariant actual, [optional] in AString message);
	void isNotNull(in nsIVariant actual, [optional] in AString message);

	void implementsInterface(in nsIVariant actual, [optional] in AString message);
	void implementInterface(in nsIVariant actual, [optional] in AString message);

/*
	nsIVariant raises(
		in nsIVariant expected,
		in nsIVariant task,
		in nsIVariant jsContext,
		[optional] in AString message
	);
*/
	nsIVariant raise(
		in nsIVariant expected,
		in nsIVariant task,
		in nsIVariant jsContext,
		[optional] in AString message
	);
	nsIVariant notRaises(
		in nsIVariant expected,
		in nsIVariant task,
		in nsIVariant jsContext,
		[optional] in AString message
	);
	nsIVariant notRaise(
		in nsIVariant expected,
		in nsIVariant task,
		in nsIVariant jsContext,
		[optional] in AString message
	);

	void matches(in nsIVariant expected, in nsIVariant actual, [optional] in AString message);
	void matche(in nsIVariant expected, in nsIVariant actual, [optional] in AString message);
	void notMatches(in nsIVariant expected, in nsIVariant actual, [optional] in AString message);
	void notMatche(in nsIVariant expected, in nsIVariant actual, [optional] in AString message);
	void pattern(in nsIVariant expected, in nsIVariant actual, [optional] in AString message);
	void notPattern(in nsIVariant expected, in nsIVariant actual, [optional] in AString message);

	void inDelta(in unsigned long expected, in unsigned long actual, in unsigned long delta, [optional] in AString message);
	void compare(in nsIVariant expected, in AString operator, in nsIVariant actual, in nsIVariant delta, [optional] in AString message);

	void contains(in nsIVariant expected, in nsIVariant actual, [optional] in AString message);
	void contain(in nsIVariant expected, in nsIVariant actual, [optional] in AString message);
	void notContains(in nsIVariant expected, in nsIVariant actual, [optional] in AString message);
	void notContain(in nsIVariant expected, in nsIVariant actual, [optional] in AString message);

	void contained(in nsIVariant expected, in nsIVariant actual, [optional] in AString message);
	void notContained(in nsIVariant expected, in nsIVariant actual, [optional] in AString message);

	nsIVariant finishesWithin(
		in unsigned long expectedTime,
		in nsIVariant task,
		in nsIVariant jsContext,
		[optional] in AString message
	);
	nsIVariant finishWithin(
		in unsigned long expectedTime,
		in nsIVariant task,
		in nsIVariant jsContext,
		[optional] in AString message
	);

	void ok(in nsIVariant actual, [optional] in AString message);
	void is(in nsIVariant expected, in nsIVariant actual, [optional] in AString message);

	nsIVariant assertionsCountEquals(
		in unsigned long expectedCount,
		in nsIVariant task,
		in nsIVariant jsContext,
		[optional] in AString message
	);
	nsIVariant assertionsMinCount(
		in unsigned long expectedCount,
		in nsIVariant task,
		in nsIVariant jsContext,
		[optional] in AString message
	);
	nsIVariant assertionsMaxCount(
		in unsigned long expectedCount,
		in nsIVariant task,
		in nsIVariant jsContext,
		[optional] in AString message
	);

	void validSuccessCount(in unsigned long expectedCount, in unsigned long minCount, in unsigned long maxCount);
	void fail(in nsIVariant expectedAndActual, in nsIVariant message, [optional] in nsIVariant extraMessage);

	AString appendTypeString(in nsIVariant value);

	property unsigned long successCount;
};


[scriptable, uuid(6939b620-be29-11de-8a39-0800200c9a66)]
interface uxuIEventTarget : nsISupports
{
	void initListeners();
	void inheritListeners(in nsIVariant original);
	void addListener(in nsIVariant listener);
	void removeListener(in nsIVariant listener);
	void removeAllListeners();
	void fireEvent(in nsIVariant event, in nsIVariant data);
};
